<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <%- include('../0-global-partials/boostrapcss.ejs'); %>
    <%- include('../0-global-partials/style.ejs'); %>
    <%- include('./partials/style.ejs'); %>
    <title>PilauHub Admin Movie - <%= user.username %></title>
</head>

<body>
    <%- include('../0-global-partials/nav.ejs'); %>
    <div class="email text-xs text-dark-white mt-3 p-2">
        <i class="fa-solid fa-o text-dark-white"></i>
        Logged in as <span class="hubColor"><%= user.email %></span>
    </div>
    <section class="latest mt-5 p-2">
        <h2 class="fs-5 fw-bold text-light border-bottom border-dark-subtle">Posting Videos</h2>
        <div id="status" class="resulting"></div>
        <div id="resulting" class="resulting"></div>
        <div class="posting p-2">
            <form id="videoform" action="/post/movie" method="post">
                <div class="mb-3">
                    <label for="video" class="form-label"><i class="fa-solid fa-video"></i> Video</label>
                    <input id="video" type="text" class="form-control" name="video" required>
                </div>
                <div class="text-center mt-4">
                    <button type="submit" class="btn bataniHub text-dark w-50">
                        POST
                        <i class="fa-regular fa-paper-plane"></i>
                    </button>
                </div>
            </form>
        </div>
        <div class="vsession p-3">
            <h3 class="fs-5 border-bottom border-dark-subtle">Movies Uploaded in this Session</h3>
            <ul id="list-uploaded">

            </ul>
        </div>
    </section>

    <script src="/socket.io/socket.io.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const form = document.getElementById('videoform');
            const videoInput = document.getElementById('video');
            const resultsDiv = document.getElementById('resulting');
            const statusDiv = document.getElementById('status');
            const listsFinished = document.getElementById('list-uploaded')

            // Initialize Socket.IO connection to '/receive/socket' namespace
            const socket = io('/receive/moviedata');

            // Connection opened
            socket.on('connect', () => {
                statusDiv.textContent = 'Socket Connected';
                statusDiv.style.color = 'green';
            });

            // Listen for 'result' events
            socket.on('result', (data) => {
                resultsDiv.textContent = `${data}`
            });

            // Listen for 'finalMessage' events
            socket.on('finalMessage', (message) => {
                statusDiv.textContent = message
                resultsDiv.textContent = ''

                //show finished
                let li = document.createElement('li')
                li.style.color = 'green'
                li.textContent = message
                listsFinished.appendChild(li)
            });

            // Listen for 'errorMessage' events
            socket.on('errorMessage', (error) => {
                const p = document.createElement('p');
                p.textContent = `Error: ${error}`;
                p.style.color = 'red';
                resultsDiv.appendChild(p);
                resultsDiv.scrollTop = resultsDiv.scrollHeight;
            });

            // Handle errors
            socket.on('connect_error', (error) => {
                statusDiv.textContent = 'Connection Error';
                statusDiv.style.color = 'red';
                console.error('Connection Error:', error);
            });

            // Handle disconnection
            socket.on('disconnect', () => {
                statusDiv.textContent = 'Disconnected';
                statusDiv.style.color = 'gray';
            });

            // Handle form submission
            form.addEventListener('submit', (e) => {
                e.preventDefault();
                const data = {
                    nkiri_link: videoInput.value.trim(),
                }

                if (!videoInput) {
                    alert('Some of values are null');
                    return;
                }

                // Send the number to the server via Socket.IO
                socket.emit('movieInput', data);
            });
        });
    </script>
    <%- include('../0-global-partials/boostrapjs.ejs'); %>
</body>

</html>